getTeams()
teams <- getTeams()
teams
getTeams <- function(){
## Pull json from nhl.com
r <- GET("https://statsapi.web.nhl.com/api/v1/teams")
## Check the status of the request
stop_for_status(r)
## Get the text and parse it from JSON to a table
txt <- content(r, "text")
json <- fromJSON(txt)$teams
}
teams <- getTeams()
teams
teams$name
teams$abbreviation
?getTeams
?test
library(nhlscrape)
?getTeams
test <- getTeams()
test
GetTeams <- function() {
## Pull json from nhl.com
r <- httr::GET("https://statsapi.web.nhl.com/api/v1/teams")
## Check the status of the request
httr::stop_for_status(r)
## Get the text and parse it from JSON to a table
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)$teams
return(json)
}
GetTeams()
api_url <- "https://statsapi.web.nhl.com/api/v1/"
GetTeams <- function() {
r <- httr::GET(paste(api_url, "teams"))
# Make sure we have the correct data from the GET request
httr::stop_for_status(r)
# Get the text and parse it from JSON to a table
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)$teams
return(json)
}
GetTeams()
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$teamName
team_names_abbr <- team_list$nameShort
team_id <- which(sapply(name, function(team_names_full) name %in% team_names_full))
}
GetTeamId("TOR")
test <- GetTeamId("TOR")
test
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$nameShort
team_id <- which(sapply(name, function(team_names_full) name %in% team_names_full))
}
test <- GetTeamId("TOR")
test
team_list <- GetTeams()
team_names_full <- team_list$name
team_list$name
team_names_full
which(sapply(name, function(team_names_full) name %in% team_names_full))
which(sapply(name, function(team_names_full) "TOR" %in% team_names_full))
which(sapply("TOR", function(team_names_full) "TOR" %in% team_names_full))
sapply(team_names_full, function(y) name %in% y)
sapply(team_names_full, function(y) "TOR" %in% y)
name <- "TOR"
which(sapply(team_names_full, function(y) name %in% y))
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$nameShort
team_id <- which(sapply(team_names_full, function(y) name %in% y))
if team_id return(team_id)
team_id <- which(sapply(team_names_abbr, function(y) name %in% y))
if team_id return(team_id)
}
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$nameShort
team_id <- which(sapply(team_names_full, function(y) name %in% y))
if team_id {
return(team_id)
}
team_id <- which(sapply(team_names_abbr, function(y) name %in% y))
if team_id {
return(team_id)
}
}
team_id <- which(sapply(team_names_full, function(y) name %in% y))
team_id
if team_id
if team_id {0}
team_if == 0
team_id == 0
team_id != 0
team_id == 0
identical(team_id, 0)
identical(team_id, 1)
identical(team_id, 0)
team_id
team_id[0]
team_id[[0]]
all.equal(team_id, 0)
test <- 0
as.int(team_id)
as.integer(team_id)
as.integer(team_id) != 0
as.integer(team_id) == 0
is.zero(as.integer(team_id))
api_url <- "https://statsapi.web.nhl.com/api/v1/"
GetTeams <- function() {
r <- httr::GET(paste(api_url, "teams"))
# Make sure we have the correct data from the GET request
httr::stop_for_status(r)
# Get the text and parse it from JSON to a table
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)$teams
return(json)
}
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$nameShort
team_id <- which(sapply(team_names_full, function(y) name %in% y))
if (as.integer(team_id) != 0) {
return(team_id)
}
team_id <- which(sapply(team_names_abbr, function(y) name %in% y))
if (team_id != 0) {
return(team_id)
}
}
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$nameShort
name <- "test"
team_id <- which(sapply(team_names_full, function(y) name %in% y))
is.equal(team_id, 0)
team_names_abbr <- team_list$abbreviation
match("test", team_names_full)
match("test", team_names_abbr)
match("TOR", team_names_abbr)
test <- match("test", team_names_abbr)
test
if (test == "NA") {}
if (is.na(test)) {}
test[[0]]
test[0]
if (is.na(test)) {}
is.na(test)
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$abbreviation
team_id <- match(name, team_names_full)
if (!is.na(team_id)) {
return(team_id)
}
team_id <- match(name, team_names_abbr)
if (!is.na(team_id)) {
return(team_id)
}
}
GetTeamId("TOR")
GetTeamId("test")
?stop
GetTeamId <- function(name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$abbreviation
team_id <- match(name, team_names_full)
if (!is.na(team_id)) {
return(team_id)
}
team_id <- match(name, team_names_abbr)
if (!is.na(team_id)) {
return(team_id)
}
stop("Could not find team with name: ", name)
}
GetTeamId("test")
GetTeamId("tor")
GetTeamId("NJD")
GetTeamId("NYR")
GetTeamId("MON")
GetTeamId("MTL")
GetTeamId("Toronto Maple Leafs")
library(nhlscrape)
?GetTeamId
library(nhlscrape)
GetGameIdNext(GetTeamId("TOR"))
data <- GetGameIdNext(GetTeamId("TOR"))
data$nextGameSchedule
data$nextGameSchedule$gamePk
data <- data$nextGameSchedule
data$dates
data$game
data$dates
data <- data$dates
data[0]
data[[0]]
data[0]$gamePk
head(data)
head(data[[1]])
data[[1]]
data[[1]]$games
data <- data[[1]]$games
data
data[[1]]$gamePk
request <- paste("teams/", team_id, "?expand=team.schedule.next")
r <- GetApiJson(request)
r
request <- paste("teams/", 10, "?expand=team.schedule.next")
r <- GetApiJson(request)
r
r$nextGameSchedule
r$nextGameSchedule$dates
r$nextGameSchedule$dates[[1]]$games[[1]]$gamePk
library(nhlscrape)
source('~/text_nhl_scrape.R')
source('~/text_nhl_scrape.R')
source('~/text_nhl_scrape.R')
print("test")
source('~/text_nhl_scrape.R')
next_game
range <- [1, 2]
range <- c(1,2)
range[0]
range[1]
range[2]
range <- c(1,5)
range[2]
range[]
range[[1]]
range[[2]]
library(nhlscrape)
test <- GetGameIdRange(10, c(2019-11-01, 2019-11-06))
library(nhlscrape)
test <- GetGameIdRange(10, c(2019-11-01, 2019-11-06))
team_id = 10
range <- c(2019-11-01, 2019-11-06)
team_id
request <- paste("schedule?teamId=",team_id)
request <- paste(request,"?startDate=",date_range[1])
request <- paste(request,"?endDate=",date_range[2])
date_range <- c(2019-11-01, 2019-11-06)
request <- paste("schedule?teamId=",team_id)
request <- paste(request,"?startDate=",date_range[1])
request <- paste(request,"?endDate=",date_range[2])
request
request <- paste("schedule?teamId=", team_id)
request <- paste(request, "?startDate=", date_range[1], sep="")
request <- paste(request, "?endDate=", date_range[2], sep="")
request
request <- paste("schedule?teamId=", team_id, sep="")
request <- paste(request, "?startDate=", date_range[1], sep="")
request <- paste(request, "?endDate=", date_range[2], sep="")
request
test <- GetGameIdRange(10, c(2019-11-01, 2019-11-06))
range <- c(2019-11-01, 2019-11-06)
range
test <- GetGameIdRange(10, c("2019-11-01", "2019-11-06"))
test <- GetGameIdRange(10, c("2019-11-01", "2019-11-06"))
test
GetApiJson("schedule?teamId=10&startDate=2019-11-01&endDate=2019-11-06")
httr::content("schedule?teamId=10&startDate=2019-11-01&endDate=2019-11-06", "text")
httr::content("https://statsapi.web.nhl.com/api/v1/schedule?teamId=10&startDate=2019-11-01&endDate=2019-11-06", "text")
httr::content("https://statsapi.web.nhl.com/api/v1/schedule?teamId=10&startDate=2019-11-01&endDate=2019-11-06", "text")
httr::content("https://statsapi.web.nhl.com/api/v1/schedule", "text")
httr::content("https://statsapi.web.nhl.com/api/v1/teams", "text")
httr::content("https://statsapi.web.nhl.com/api/v1/team", "text")
httr::GETt("https://statsapi.web.nhl.com/api/v1/schedule?teamId=10&startDate=2019-11-01&endDate=2019-11-06", "text")
httr::GET("https://statsapi.web.nhl.com/api/v1/schedule?teamId=10&startDate=2019-11-01&endDate=2019-11-06", "text")
httr::GET("https://statsapi.web.nhl.com/api/v1/schedule", "text")
httr::GET("https://statsapi.web.nhl.com/api/v1/teams", "text")
GetTeamId("TOR")
api_url <- "https://statsapi.web.nhl.com/api/v1/"
call = "teams"
r <- httr::GET(paste(api_url, call))
# Make sure we have the correct data from the GET request
httr::stop_for_status(r)
# Get the text and parse it from JSON to a table
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)$teams
json
call= "schedule"
r <- httr::GET(paste(api_url, call))
# Make sure we have the correct data from the GET request
httr::stop_for_status(r)
# Get the text and parse it from JSON to a table
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)$teams
json
r <- httr::GET(paste(api_url, call))
r
httr::stop_for_status(r)
txt <- httr::content(r, "text")
txt
GetTeamId("TOR")
date_range = c("2019-11-01", "2019-11-06")
GetGameIdRange(10, date_range)
test <- GetGameIdRange(10, date_range)
date_range = c("2019-10-15", "2019-11-06")
test <- GetGameIdRange(10, date_range)
test$dates$games
test$dates$games[[1]]
test$dates$games[[1]]$gamePk
test$dates$games[[:]]$gamePk
for (game in test$dates$games)
print(game)
for (game in test$dates$games)
print(game$gamePk)
test <- GetGameIdRange(10, date_range)
date_range = c("2019-10-15", "2019-11-06")
test <- GetGameIdRange(10, date_range)
test
source('~/text_nhl_scrape.R')
library(nhlscrape)
source('~/text_nhl_scrape.R')
team_list <- GetTeams()
team_names_full <- team_list$name
team_names_abbr <- team_list$abbreviation
api_url <- "https://statsapi.web.nhl.com/api/v1/"
r <- httr::GET(paste(api_url, call))
call <- "teams"
r <- httr::GET(paste(api_url, call))
r <- httr::GET(paste(api_url, call))
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)
team_names_abbr <- team_list$abbreviation
team_id <- match(team_name, team_names_abbr)
team_name <- "TOR"
team_id <- match(team_name, team_names_abbr)
team_names_abbr <- team_list$abbreviation
library(nhlscrape)
source('~/text_nhl_scrape.R')
call <- "teams"
api_url <- "https://statsapi.web.nhl.com/api/v1/"
return(GetApiJson("teams"))
GetApiJson("teams")
team_list <- GetApiJson("teams")
team_list$teams
team_list$teams$abbreviation
team_list <- GetTeams()
team_names_full <- team_list$teams$name
team_names_abbr <- team_list$teams$abbreviation
team_name <- "TOR"
team_id <- match(team_name, team_names_abbr)
library(nhlscrape)
source('~/text_nhl_scrape.R')
tid <- GetTeamId("TOR")
team_list <- GetTeams()
team_names_abbr <- team_list$teams$abbreviation
team_id <- match(team_name, team_names_full)
team_id <- match(team_name, team_names_abbr)
!is.na(team_id)
test <- GetTeamId("TOR")
GetTeamId <- function(team_name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$teams$name
team_names_abbr <- team_list$teams$abbreviation
team_id <- match(team_name, team_names_full)
if (!is.na(team_id)) {
return(team_id)
}
team_id <- match(team_name, team_names_abbr)
print(team_id)
if (!is.na(team_id)) {
return(team_id)
}
stop("Could not find team with name: ", team_name)
}
tid <- GetTeamId("TOR")
GetTeamId
GetTeamId("TOR")
library(nhlscrape)
GetTeams()
library(nhlscrape)
GetTeamId("TOR")
GetTeamId <- function(team_name) {
# Expect name to be either full name or abbreviation
team_list <- GetTeams()
team_names_full <- team_list$teams$name
team_names_abbr <- team_list$teams$abbreviation
team_id <- match(team_name, team_names_full)
if (!is.na(team_id)) {
return(team_id)
}
team_id <- match(team_name, team_names_abbr)
if (!is.na(team_id)) {
return(team_id)
}
stop("Could not find team with name: ", team_name)
}
GetTeamId("TOR")
library(nhlscrape)
GetApiJson("teams")
library(nhlscrape)
GetTeams()
GetTeamId("Toronto Maple Leafs")
GetTeamId("TOR")
library(nhlscrape)
GetTeamId("Toronto Maple Leafs")
library(nhlscrape)
GetTeamId("TOR")
source('~/text_nhl_scrape.R')
api_url <- "https://statsapi.web.nhl.com/api/v1/"
request <- paste("teams/", team_id, "?expand=team.schedule.next")
team_it <- 10
request <- paste("teams/", team_id, "?expand=team.schedule.next")
team_id <- 10
request <- paste("teams/", team_id, "?expand=team.schedule.next")
request <- paste("teams/", team_id, "?expand=team.schedule.next", sep="")
r <- GetApiJson(request)
r$teams$nextGameSchedule$dates[[1]]$games[[1]]$gamePk
library(nhlscrape)
source('~/text_nhl_scrape.R')
api_url <- "https://statsapi.web.nhl.com/api/v1/"
GetApiJson <- function(call) {
r <- httr::GET(paste(api_url, call))
# Make sure we have the correct data from the GET request
httr::stop_for_status(r)
# Get the text and parse it from JSON to a table
txt <- httr::content(r, "text")
json <- jsonlite::fromJSON(txt)
return(json)
}
GetTeams <- function() {
return(GetApiJson("teams"))
}
team_list <- GetTeams()
team_names_abbr <- team_list$teams$abbreviation
team_id <- match(team_name, team_names_abbr)
team_name <- "TOR"
team_id <- match(team_name, team_names_abbr)
library(nhlscrape)
tid <- GetTeamId("TOR")
GetTeamId()
GetTeamId
library(nhlscrape)
tid <- GetTeamId("TOR")
GetTeamId()
GetTeamId
tid <- GetTeamId("TOR")
library(nhlscrape)
tid <- GetTeamId("TOR")
next_game <- GetGameIdNext(tid)
library(nhlscrape)
tid <- GetTeamId("TOR")
next_game <- GetGameIdNext(tid)
range_game <- GetGameIdRange(team_id, c("2019-11-01", "2019-11-07"))
range_game <- GetGameIdRange(team_id, c("2019-11-03", "2019-11-05"))
range_game
is.integer(32)
is.integer("32")
is.array(c(1,2))
is.list(c(1,2))
game_id <- 2017020228
request <- paste("game", game_id, "/feed/live", sep="")
request
request <- paste("game/", game_id, "/feed/live", sep="")
request
r <- GetApiJson(request)
head(r)
range_game <- GetGameIdRange(team_id, c("2019-11-03", "2019-11-05"))
range_game
request <- paste("game/", range_game, "/feed/live", sep="")
r <- GetApiJson(request)
head(r)
head(r$gameData)
names(r$gameData)
names(r$liveData)
names(r$liveData$plays)
names(r$liveData$plays$allPlays)
names(r$liveData$plays$allPlays$result)
names(r$liveData$plays$allPlays$result$event)
names(r$liveData$plays$allPlays$result)
r$liveData$plays$allPlays$result$event
plays <- r$liveData$plays$allPlays$result
plays
head(plays)
plays
plays$strength
r$liveData$plays$currentPlay$coordinates
r$liveData$plays$allPlays$coordinates
r$liveData$plays$allPlays$about
plays <- r$liveData$plays$allPlays
length(plays)
length(plays$result)
plays$result
length(plays$result[1])
length(plays$result[[1]])
length(plays$coordinates[[1]])
plays$result
names(plays$result)
names(plays$coordinates)
plays$coordinates
names(plays$about)
